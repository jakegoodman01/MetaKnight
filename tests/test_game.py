from unittest import TestCase
from metaknight.game import Game
from metaknight.move import InvalidNotationError
from metaknight.piece import Piece, PieceType, Color


class TestGame(TestCase):
    def setUp(self):
        self.game = Game()

    def test_copy(self):
        self.game.play_move('e4')
        self.game.play_move('e5')
        self.game.play_move('Bc4')
        self.game.play_move('f6')

        self.game_copy = self.game.copy()
        self.game_copy.play_move('Qf3')
        self.game_copy.play_move('Ne7')
        self.game_copy.play_move('Bf7')

        self.game.play_move('a3')
        self.game.play_move('Nc6')
        self.game.play_move('Qh5')
        self.game.play_move('Ke7')

        self.assertEqual(self.game.board.get_square('f3').piece, None)
        self.assertEqual(self.game.board.get_square('e7').piece, Piece(PieceType.KING, Color.BLACK))
        self.assertEqual(self.game_copy.board.get_square('f3').piece, Piece(PieceType.QUEEN, Color.WHITE))
        self.assertEqual(self.game_copy.board.get_square('e7').piece, Piece(PieceType.KNIGHT, Color.BLACK))

    def test_possible_games(self):
        self.assertEqual(20, len(self.game.possible_games(1)))
        self.assertEqual(400, len(self.game.possible_games(2)))
        self.assertEqual(8902, len(self.game.possible_games(3)))
        # self.assertEqual(20, len(self.game.possible_games(1)))

    def test_play_move(self):
        self.game.play_move('e4')
        self.assertEqual(self.game.board.get_square(location='e2').piece, None)
        self.assertEqual(self.game.board.get_square(location='e4').piece, Piece(PieceType.PAWN, Color.WHITE))
        self.assertEqual(self.game.to_move, Color.BLACK)

        self.game.play_move('Nc6')
        self.assertEqual(self.game.board.get_square(location='b8').piece, None)
        self.assertEqual(self.game.board.get_square(location='c6').piece, Piece(PieceType.KNIGHT, Color.BLACK))
        self.assertEqual(self.game.to_move, Color.WHITE)

    def test_en_passant(self):
        self.game.play_move('e4')
        self.game.play_move('f5')
        self.game.play_move('exf5')
        self.game.play_move('g5')
        self.game.play_move('fxg6')
        self.game.play_move('hxg6')
        self.game.play_move('h4')
        self.game.play_move('g5')
        self.game.play_move('a3')
        self.game.play_move('g4')
        self.game.play_move('f4')
        self.assertRaises(InvalidNotationError, lambda: self.game.play_move('gxh3'))
        self.game.play_move('gxf3')

    def test_check_situations(self):
        self.game.play_move('d4')
        self.game.play_move('e5')
        self.game.play_move('h3')
        self.game.play_move('Bb4')
        self.assertRaises(InvalidNotationError, lambda: self.game.play_move('Qd3'))
        self.game.play_move('Nc3')
        self.game.play_move('Bxc3')
        self.assertRaises(InvalidNotationError, lambda: self.game.play_move('Kd2'))
        self.game.play_move('Bd2')
        self.game.play_move('Qh4')
        self.assertRaises(InvalidNotationError, lambda: self.game.play_move('f4'))
        self.assertRaises(InvalidNotationError, lambda: self.game.play_move('f3'))
        self.assertRaises(InvalidNotationError, lambda: self.game.play_move('Be3'))
        self.assertRaises(InvalidNotationError, lambda: self.game.play_move('Bc1'))

    def test_king_side_castle(self):
        self.game.play_move('e4')
        self.game.play_move('e5')
        self.game.play_move('Bc4')
        self.game.play_move('Qh4')
        self.game.play_move('Bxf7')
        self.game.play_move('Kxf7')
        self.game.play_move('Qf3')
        self.game.play_move('Ke8')
        self.game.play_move('Ne2')
        self.game.play_move('Nc6')
        self.game.play_move('O-O')
        self.assertEqual(self.game.board.get_square('e1').piece, None)
        self.assertEqual(self.game.board.get_square('f1').piece, Piece(PieceType.ROOK, Color.WHITE))
        self.assertEqual(self.game.board.get_square('g1').piece, Piece(PieceType.KING, Color.WHITE))
        self.assertEqual(self.game.board.get_square('h1').piece, None)

        self.game.play_move('Bc5')
        self.game.play_move('Nc3')
        self.game.play_move('Nh6')
        self.game.play_move('d3')
        self.assertRaises(InvalidNotationError, lambda: self.game.play_move('O-O'))

    def test_queen_side_castle(self):
        self.game.play_move('d4')
        self.game.play_move('Nf6')
        self.game.play_move('c4')
        self.game.play_move('Nc6')
        self.game.play_move('Nc3')
        self.game.play_move('d6')
        self.game.play_move('Rb1')
        self.game.play_move('Bf5')
        self.game.play_move('Ra1')
        self.game.play_move('e5')
        self.game.play_move('Bg5')
        self.game.play_move('Qd7')
        self.game.play_move('Qa4')
        self.game.play_move('Ne4')
        self.assertRaises(InvalidNotationError, lambda: self.game.play_move('O-O-O'))
        self.assertRaises(InvalidNotationError, lambda: self.game.play_move('O-O'))

        self.game.play_move('h3')
        self.assertRaises(InvalidNotationError, lambda: self.game.play_move('O-O-O'))
        self.assertRaises(InvalidNotationError, lambda: self.game.play_move('O-O'))

        self.game.play_move('Nf6')
        self.game.play_move('e4')
        self.game.play_move('O-O-O')
        self.assertEqual(self.game.board.get_square('a8').piece, None)
        self.assertEqual(self.game.board.get_square('b8').piece, None)
        self.assertEqual(self.game.board.get_square('c8').piece, Piece(PieceType.KING, Color.BLACK))
        self.assertEqual(self.game.board.get_square('d8').piece, Piece(PieceType.ROOK, Color.BLACK))
        self.assertEqual(self.game.board.get_square('e8').piece, None)

    def test_tiviakov_vs_anand_2011(self):
        self.game.play_move(notation='e4')
        self.game.play_move(notation='c5')
        self.game.play_move(notation='Nf3')
        self.game.play_move(notation='d6')
        self.game.play_move(notation='Bb5')
        self.game.play_move(notation='Nd7')
        self.game.play_move(notation='d4')
        self.game.play_move(notation='cxd4')
        self.game.play_move(notation='Qxd4')
        self.game.play_move(notation='a6')
        self.game.play_move(notation='Bxd7')
        self.game.play_move(notation='Bxd7')
        self.game.play_move(notation='c4')
        self.game.play_move(notation='e5')
        self.game.play_move(notation='Qd3')
        self.game.play_move(notation='h6')
        self.game.play_move(notation='Nc3')
        self.game.play_move(notation='Nf6')
        self.game.play_move(notation='O-O')
        self.game.play_move(notation='Be7')
        self.game.play_move(notation='a4')
        self.game.play_move(notation='b6')
        self.game.play_move(notation='b3')
        self.game.play_move(notation='Ra7')
        self.game.play_move(notation='Rd1')
        self.game.play_move(notation='Bc8')
        self.game.play_move(notation='Ba3')
        self.game.play_move(notation='Rd7')
        self.game.play_move(notation='Nd2')
        self.game.play_move(notation='O-O')
        self.game.play_move(notation='Nf1')
        self.game.play_move(notation='Bb7')
        self.game.play_move(notation='Ne3')
        self.game.play_move(notation='Re8')
        self.game.play_move(notation='Ncd5')
        self.game.play_move(notation='Nxd5')
        self.game.play_move(notation='Nxd5')
        self.game.play_move(notation='Bxd5')
        self.game.play_move(notation='Qxd5')
        self.game.play_move(notation='Qa8')
        self.game.play_move(notation='Qxa8')
        self.game.play_move(notation='Rxa8')
        self.game.play_move(notation='Rd5')
        self.game.play_move(notation='f6')
        self.game.play_move(notation='Rad1')
        self.game.play_move(notation='Rad8')
        self.game.play_move(notation='g3')
        self.game.play_move(notation='g5')
        self.game.play_move(notation='f4')
        self.game.play_move(notation='gxf4')
        self.game.play_move(notation='gxf4')
        self.game.play_move(notation='Kf7')
        self.game.play_move(notation='Kf2')
        self.game.play_move(notation='exf4')
        self.game.play_move(notation='Kf3')
        self.game.play_move(notation='Ke6')
        self.game.play_move(notation='Bc1')
        self.game.play_move(notation='Rc8')
        self.game.play_move(notation='Bxf4')
        self.game.play_move(notation='Bf8')
        self.game.play_move(notation='h4')
        self.game.play_move(notation='Rc6')
        self.game.play_move(notation='h5')
        self.game.play_move(notation='Rb7')
        self.game.play_move(notation='Be3')
        self.game.play_move(notation='Rb8')
        self.game.play_move(notation='Bd4')
        self.game.play_move(notation='Rc7')
        self.game.play_move(notation='Rg1')
        self.game.play_move(notation='Bg7')
        self.game.play_move(notation='Rg6')
        self.game.play_move(notation='Rf7')
        self.game.play_move(notation='Be3')
        self.game.play_move(notation='Rd7')
        self.game.play_move(notation='Rf5')
        self.game.play_move(notation='Rf7')
        self.game.play_move(notation='Kg4')
        self.game.play_move(notation='Bf8')
        self.game.play_move(notation='Bxh6')
        self.game.play_move(notation='Bxh6')
        self.game.play_move(notation='Rxh6')
        self.game.play_move(notation='Rg7')
        self.game.play_move(notation='Kf4')
        self.game.play_move(notation='Rf8')
        self.game.play_move(notation='a5')
        self.game.play_move(notation='Rg1')
        self.game.play_move(notation='axb6')
        self.game.play_move(notation='Rb1')
        self.game.play_move(notation='b7')
        self.game.play_move(notation='Rxb3')
        self.game.play_move(notation='e5')
        self.game.play_move(notation='dxe5')
        self.game.play_move(notation='Rxe5')
        self.game.play_move(notation='Kd6')
        self.game.play_move(notation='Rf5')
        self.game.play_move(notation='Ke6')
        self.game.play_move(notation='Rh7')
        self.game.play_move(notation='Rd8')
        self.game.play_move(notation='Rd5')
